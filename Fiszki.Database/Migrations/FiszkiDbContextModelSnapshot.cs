// <auto-generated />
using System;
using System.Collections.Generic;
using Fiszki.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fiszki.Database.Migrations
{
    [DbContext(typeof(FiszkiDbContext))]
    partial class FiszkiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fiszki.Database.Entities.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AiModel")
                        .HasColumnType("text")
                        .HasColumnName("ai_model");

                    b.Property<string>("BackContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("back_content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreationSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creation_source");

                    b.Property<string>("FrontContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("front_content");

                    b.Property<string>("OriginalTextHash")
                        .HasColumnType("text")
                        .HasColumnName("original_text_hash");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("flashcards", (string)null);
                });

            modelBuilder.Entity("Fiszki.Database.Entities.LearningProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("EaseFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("ease_factor");

                    b.Property<Guid>("FlashcardId")
                        .HasColumnType("uuid");

                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("interval");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_review_date");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_review_date");

                    b.Property<int>("Repetitions")
                        .HasColumnType("integer")
                        .HasColumnName("repetitions");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardId")
                        .IsUnique();

                    b.HasIndex("UserId", "NextReviewDate");

                    b.ToTable("learning_progress", (string)null);
                });

            modelBuilder.Entity("Fiszki.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalCardsAccepted")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCardsGenerated")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Fiszki.Database.Entities.Flashcard", b =>
                {
                    b.HasOne("Fiszki.Database.Entities.User", "User")
                        .WithMany("Flashcards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fiszki.Database.Entities.LearningProgress", b =>
                {
                    b.HasOne("Fiszki.Database.Entities.Flashcard", "Flashcard")
                        .WithOne("LearningProgress")
                        .HasForeignKey("Fiszki.Database.Entities.LearningProgress", "FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fiszki.Database.Entities.User", "User")
                        .WithMany("LearningProgressEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flashcard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fiszki.Database.Entities.Flashcard", b =>
                {
                    b.Navigation("LearningProgress");
                });

            modelBuilder.Entity("Fiszki.Database.Entities.User", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("LearningProgressEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
