@page "/generate"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using Fiszki.Components.Pages.Generate
@using Fiszki.Services.Models.Generation
@attribute [Authorize]

<PageTitle>Generate Flashcards - Fiszki</PageTitle>

<MudContainer Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Generate Flashcards</MudText>
    
    @if (_state.Status == GenerationStatusEnum.Idle)
    {
        <EmptyState />
    }
    else if (_state.ErrorMessage != null)
    {
        <ErrorState Message="@_state.ErrorMessage" OnRetry="HandleRetry" />
    }
    else
    {
        <div class="d-flex flex-column gap-4">
            <SourceInputForm 
                Value="@_state.Source" 
                OnChange="HandleSourceChange"
                OnSubmit="HandleGenerateSubmit"
                IsGenerating="@(_state.Status == GenerationStatusEnum.Generating)" />

            @if (_state.Status != GenerationStatusEnum.Idle)
            {
                <MudPaper Class="pa-4">
                    <MudText>@GetStatusMessage()</MudText>
                    @if (_state.Status == GenerationStatusEnum.Generating)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2" />
                    }
                </MudPaper>
            }

            @if (_state.Proposals.Any())
            {
                <ProposalsSection 
                    Proposals="@_state.Proposals"
                    SelectionStats="@GetSelectionStats()"
                    Disabled="@_state.IsSaving"
                    OnBulkAccept="HandleBulkAccept"
                    OnBulkReject="HandleBulkReject"
                    OnSaveSelected="HandleSaveSelected"
                    OnEdit="HandleProposalEdit" />
            }
        </div>
    }
</MudContainer>

@if (_state.Status == GenerationStatusEnum.Generating)
{
    <LoadingOverlay 
        Visible="true"
        OnCancel="HandleCancelGeneration" />
}

@if (_state.ActiveProposalId != null)
{
    <ProposalReviewDialog 
        Proposal="@_state.Proposals.FirstOrDefault(p => p.Id == _state.ActiveProposalId)"
        OnSave="HandleProposalSave"
        OnCancel="HandleCloseEditDialog" />
}

@code {
    private string GetStatusMessage() => _state.Status switch
    {
        GenerationStatusEnum.Queued => "Preparing to generate flashcards...",
        GenerationStatusEnum.Generating => "Generating flashcards...",
        GenerationStatusEnum.Completed => "Generation completed",
        GenerationStatusEnum.Failed => "Generation failed",
        GenerationStatusEnum.Canceled => "Generation canceled",
        _ => string.Empty
    };
    
    // ...existing code...
}
